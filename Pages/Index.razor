@page "/"
@using BlazorSeven.Services
@inject Manager manager

<MCard Class="overflow-hidden" Style="width:100%">
    <MAppBar Fixed Height="50">
        <ChildContent>
            <InputFile accept=".json,.txt" hidden id="selectFile" OnChange="OnChange"></InputFile>

            <MToolbarTitle>
                sha1Links visual tools
            </MToolbarTitle>
            <MSpacer></MSpacer>

            <label for="selectFile">
                <MButton Color="primary" style="pointer-events:none">
                    文件选择
                </MButton>
            </label>



        </ChildContent>
    </MAppBar>

    <MCard Style="text-align:right;margin-top:55px">

        <label for="selectFile">
            <MButton Color="orange" Small style="pointer-events:none">
                继续添加文件
            </MButton>
        </label>

        <Masa.Blazor.Presets.PDrawer Title="搜索" Width="360">
            <ActivatorContent>
                <MButton Icon @attributes="@context.Attrs" title="搜索">
                    <MIcon>mdi-magnify</MIcon>
                </MButton>

            </ActivatorContent>
            <ChildContent>
                搜索
            </ChildContent>
        </Masa.Blazor.Presets.PDrawer>
        <Masa.Blazor.Presets.PDrawer Title="排序" Width="360">
            <ActivatorContent>
                <MButton Icon @attributes="@context.Attrs" title="排序">
                    <MIcon>mdi-sort</MIcon>
                </MButton>

            </ActivatorContent>
            <ChildContent>
                排序
            </ChildContent>
        </Masa.Blazor.Presets.PDrawer>
        <Masa.Blazor.Presets.PDrawer Title="筛选" Width="360">
            <ActivatorContent>
                <MButton Icon @attributes="@context.Attrs" title="筛选">
                    <MIcon>mdi-checkbox-multiple-marked-outline</MIcon>
                </MButton>

            </ActivatorContent>
            <ChildContent>
                Content
            </ChildContent>
        </Masa.Blazor.Presets.PDrawer>

    </MCard>

    @if (paths.Count > 0)
    {
        <MBreadcrumbs Divider=">" Style="height:24px">
            @foreach (var path in paths)
            {
                <MBreadcrumbsItem><a class="ainBreadcrumbsItem" title="@path.Name" @onclick="@(e=>ChangeCurrentItem(path))">@path.Name</a></MBreadcrumbsItem>
            }
        </MBreadcrumbs>
    }

    <MCard Style="width:100%">
        <MVirtualScroll OverscanCount=20 Items="itemsInCurrentFolder" TItem="Item" Context="vItem" Style="max-height:calc(100vh - 168px);">
            <ItemContent>
                <MListItem Dense>
                    <div class="itemImage">
                        @if (vItem.ItemType == ItemType.Folder)
                        {
                            <MIcon Color="yellow lighten-1">
                                mdi-folder
                            </MIcon>
                        }
                        else
                        {
                            <MIcon>
                                mdi-file
                            </MIcon>
                        }
                    </div>

                    <MListItemContent>
                        <MListItemTitle Style="padding:0px">
                            @if (vItem is FolderItem folder)
                            {
                                <div @ondblclick="@(e=>ChangeCurrentItem(folder))" class="itemDetail">
                                    <p class="itemName">
                                        @folder.Name
                                    </p>
                                    <p class="itemSize">
                                        @SizeHelper.CalculateFileSize(folder.Size)
                                        <span>@($",文件夹: {folder.FolderCount},文件: {folder.FileCount}")</span>
                                    </p>
                                </div>

                            }
                            else
                            {
                                <div class="itemDetail">
                                    <p class="itemName">
                                        @vItem.Name
                                    </p>
                                    <p class="itemSize">
                                        @SizeHelper.CalculateFileSize(vItem.Size)
                                    </p>
                                </div>
                            }

                        </MListItemTitle>
                    </MListItemContent>

                    <MListItemAction>
                        <MButton Dark
                                 Icon
                                 OnClick="OnContextMenu">
                            <MIcon>mdi-dots-vertical</MIcon>
                        </MButton>

                    </MListItemAction>

                </MListItem>

                <MDivider></MDivider>

            </ItemContent>
        </MVirtualScroll>

    </MCard>


    <MMenu @bind-Value="showMenu"
           PositionX="X"
           PositionY="Y"
           Absolute
           OffsetY>
        <MList>
            <MListItem>
                <MListItemContent>
                    <MListItemTitle>
                        复制文件sha1
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>
            <MListItem>
                <MListItemContent>
                    <MListItemTitle>
                        复制sha1链接
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>
            <MListItem>
                <MListItemContent>
                    <MListItemTitle>
                        编辑名称
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>
            <MListItem>
                <MListItemContent>
                    <MListItemTitle>
                        删除
                    </MListItemTitle>
                </MListItemContent>
            </MListItem>
        </MList>
    </MMenu>




    <div class="text-center">
        <MDialog @bind-Value="isLoading" Persistent Width="360">
            <MCard Color="primary"
                   Dark>
                <h2 style="margin-top:10px;margin-bottom:10px;margin-left:10px">正在载入数据...</h2>

                <MProgressLinear Indeterminate
                                 Color="white"
                                 Class="mb-0"></MProgressLinear>
            </MCard>
        </MDialog>
    </div>




</MCard>










@code {




    List<Item> allItems = new();
    FolderItem currentFolder;
    List<Item> itemsInCurrentFolder = new();
    bool isLoading = false;
    List<FolderItem> paths = new();

    bool isInSearchMode = false;

    #region ContextMenu
    bool showMenu = false;
    double X = 0;
    double Y = 0;

    private async Task OnContextMenu(MouseEventArgs args)
    {
        showMenu = false;
        X = args.ClientX;
        Y = args.ClientY;
        showMenu = true;

        await Task.CompletedTask;
    }


    #endregion



    private void ChangeCurrentItem(FolderItem folder)
    {
        if (currentFolder != null && folder.ID == currentFolder.ID) return;
        Console.WriteLine(folder);
        paths.Clear();
        itemsInCurrentFolder.Clear();
        this.StateHasChanged();
        currentFolder = folder;
        paths = GetParentFolders(currentFolder);
        itemsInCurrentFolder = allItems.Where(q => q.ParentID == folder.ID)?.OrderBy(q => q.ItemType).ThenBy(q => q.Size).ToList() ?? new List<Item>();
    }

    private List<FolderItem> GetParentFolders(FolderItem folder)
    {
        var item = folder;
        List<FolderItem> parents = new();
        if (folder != manager.RootFolder)
        {
            parents.Add(folder);
        }

        while (item.ParentID != manager.RootFolder.ID)
        {
            item = allItems.FirstOrDefault(q => q.ID == item.ParentID) as FolderItem;

            if (item != null)
            {
                parents.Add(item);
            }
            else
            {
                break;
            }

        }



        parents.Add(manager.RootFolder);
        parents.Reverse();

        return parents;
    }


    private async void OnChange(InputFileChangeEventArgs e)
    {
        isLoading = true;
        this.StateHasChanged();
        await Task.Delay(500);
        await using var stream = e.File.OpenReadStream(maxAllowedSize: e.File.Size);
        var addItems = await Converters.ConverFromFileStream(stream, e.File.Name, manager.RootFolder.ID);

        allItems = addItems;
        currentFolder = null;
        ChangeCurrentItem(manager.RootFolder);


        isLoading = false;
        this.StateHasChanged();
    }







  }


